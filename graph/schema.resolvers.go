package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strconv"

	"github.com/MinhDuy27/Ecommerce-App/graph/model"
	"github.com/MinhDuy27/Ecommerce-App/internal/dto"
)

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input *model.NewUser) (*model.Message, error) {
	logindto := dto.Logindto{
		Email:    input.Email,
		Password: input.Password,
	}
	SignUpdto := dto.SignUpdto{
		Logindto: logindto,
		Phone:    "123124514",
	}
	value, err := r.Usv.SignUp(SignUpdto)
	if err != nil {
		return nil, err
	}
	message := model.Message{
		Message: value,
	}
	return &message, nil
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	uint_id, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	value, err := r.Usv.GetProfilesByID(uint(uint_id))
	if err != nil {
		return nil, err
	}
	user := model.User{
		Email:     value.Email,
		FirstName: value.FirstName,
		LastName:  value.LastName,
		Phone:     value.Phone,
	}
	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
